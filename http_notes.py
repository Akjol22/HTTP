'''HTTP - HeperText Transfer Protocol - протокол передачи различных ресурсов (изображение, видео, аудио, данные и тд)
'клиент - сервер' == 'запрос - ответ'
'''

'''
SMTP - Simple Mail Transfer Protocol (для передачи почты)

FTP - File Transfer Protocol (для передачи файлов)
'''

'''HTTP - запрос (request)'''

'''стартовоя строка'''
    # метод запроса
    # URI - /shop
    # HTTP версия (1.1)


# host : makers.kg
# тело : body (данные которые хотим передать)

# Методы HTTP
# GET - получения ресура
# POST - создание ресурса
# PUT - польная замена ресурса
# PATCH - частичное изменение
# DELETE - удаление ресурса

# Пример
# GET / HTTP/1.1 (URI - /)
# host: makerscourses.kg

# Загаловки запросов
# Accept - список форматов ревурса
# Accept-Encoding - перечень способов кодироки
# Accept-Language - список языков (которые поддерживает клиент)
# Authorization - данные для авторизации
# Host - доменное ресурса
# User-Agent - обозначает человека

# Тело запроса
# name=Joe&speen=vdafvavaemail=joespeen@gmail.com&password=

# Структура HTTP response (ответ)
'Стартовая строка'
# HTTP/версия Код состаяния Пояснения

# HTTP/1.1 200 OK - стартовая строка
# Server: nginx (название и версия сервера)
# Date: Дата
# Content-Type: applacation/json (xml,yaml)
# Content-Length: 100
# Body:

# Коды состояния HTTP (5 классов)

# 1XX - информационные

# 2XX - успешные
# 200 OK - успешное получение или обнавление
# 201 Created - успешное создание 

# 3XX - перенаправления

# 4XX - ошибка клиента
# 404 Not found - ошибка адреса ресурсов (неправильный URL)
# 405 Method Not Allowed - метод не поддерживается ресурсов

# 5XX - Ошибки сервера

# 501 Not Imlemented - у сервера нереализованы возможности, чтобы оброботать резултат

# HTTP
#  |
#  |
#  |
#  V
#  TCP/IP

#  IP (Internet Protocol) -> образует тунель передачи данных м.ж хостами (Могут перемешаться, потеряться или продублироваться)

# TCP (Tranmission Control Protocol) - транспортный протокол, который упрядочивает нашу передачу данных. Порт - чтобы не занимать весь тунель

# ip_adress:port(8000) -> socket (соединие между клиентом и сервером)
